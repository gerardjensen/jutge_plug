const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

function getCookies(cookiePath) {
  const cookieString = fs.readFileSync(cookiePath, 'utf8');
  // Parse the Netscape cookie file format generated by curl
  const cookies = [];
  const lines = cookieString.split('\n');
  for (const line of lines) {
    if (line.startsWith('#') || !line.trim()) {
      continue;
    }
    const parts = line.split('\t');
    const [domain, , path, , , name, value] = parts;
    cookies.push({
      name: name.trim(),
      value: value.trim(),
      domain: domain.trim(),
      path: path.trim(),
      httpOnly: false,
      secure: false
    });
  }

  return cookies; 
}

async function uploadSubmission(exerciseID, submissionFilePath, compilerName, page) {
  const url = `https://jutge.org/problems/${exerciseID}/submissions`;
  await page.goto(url, { waitUntil: 'networkidle2' });

  const fileInputSelector = 'input[type="file"]';
  const filePath = path.resolve(submissionFilePath);
  await page.waitForSelector(fileInputSelector);
  const input = await page.$(fileInputSelector);
  await input.uploadFile(filePath);

  await page.select('select[name="compiler_id"]', compilerName);
  await page.click('button[name="submit"]');
  await page.waitForNavigation({ waitUntil: 'networkidle2' }); // 2 and not 0 because I feel so, so far I haven't tested it
}

(async () => {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  const args = process.argv.slice(2);
  const EXERCISE_ID = args[0];
  const COOKIE_FILE_PATH = args[1];
  const SUBMISSION_FILE_PATH = args[2];
  const COMPILER_NAME = args[3];

  const cookies = getCookies(COOKIE_FILE_PATH);
  for (const cookie of cookies) 
    await page.setCookie(cookie);

  await uploadSubmission(EXERCISE_ID,SUBMISSION_FILE_PATH,COMPILER_NAME,page); 
  console.log(page.url());
  await browser.close();
})();
